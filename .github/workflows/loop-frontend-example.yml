# Example workflow for loop-frontend repository
# This demonstrates the complete CI/CD pipeline with runtime verification

name: Loop Frontend PR Verification
on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'src/**'
      - 'public/**'
      - 'package.json'
      - 'vite.config.ts'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Build and deploy to Firebase preview
  deploy-preview:
    name: Deploy Firebase Preview
    runs-on: ubuntu-latest
    outputs:
      preview_url: ${{ steps.deploy.outputs.preview_url }}
      firebase_target: ${{ steps.deploy.outputs.firebase_target }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build application
        run: yarn build
        env:
          VITE_API_URL: ${{ vars.VITE_API_URL_STAGING }}
          VITE_FIREBASE_CONFIG: ${{ vars.VITE_FIREBASE_CONFIG }}

      - name: Setup Firebase CLI
        uses: w9jds/firebase-action@master
        with:
          args: --version

      - name: Deploy to Firebase Preview
        id: deploy
        run: |
          # Deploy to 'app' target for PR preview
          firebase deploy --only hosting:app --project ${{ vars.FIREBASE_PROJECT_ID }}
          PREVIEW_URL="https://${{ vars.FIREBASE_PROJECT_ID }}--pr-${{ github.event.number }}-app.web.app"
          echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT
          echo "firebase_target=app" >> $GITHUB_OUTPUT
          echo "ðŸš€ Preview deployed to: $PREVIEW_URL"
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  # Gemini AI code review
  gemini-review:
    name: Gemini Code Review
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gemini Code Review
        uses: your-org/gemini-code-review@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          gemini-api-key: ${{ secrets.GEMINI_API_KEY }}
          focus-areas: 'React components, routing, UI changes, performance'
          exclude-paths: 'node_modules/**, dist/**, **/*.test.ts'

  # Runtime visual verification
  runtime-verification:
    name: Runtime PR Verification
    needs: [deploy-preview, gemini-review]
    runs-on: ubuntu-latest
    if: needs.deploy-preview.outputs.preview_url != ''
    steps:
      - name: Run Visual Verification
        uses: your-org/runtime-pr-verification@v1
        with:
          preview-url: ${{ needs.deploy-preview.outputs.preview_url }}
          firebase-credentials: ${{ secrets.FIREBASE_SA_BASE64 }}
          storage-bucket: 'loop-frontend-screenshots'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # Optional: Override auto-detection
          firebase-project-id: ${{ vars.FIREBASE_PROJECT_ID }}
          firebase-target: ${{ needs.deploy-preview.outputs.firebase_target }}
          build-system: 'vite'
          # Extended configuration for complex SPA
          viewports: '1920x1080:Desktop,1366x768:Laptop,768x1024:Tablet,375x667:iPhone,390x844:iPhone12'
          test-timeout: '10m'
          max-routes: '20'
          cleanup-days: '21'
        env:
          # Enable debug logging
          ACTIONS_STEP_DEBUG: true

  # Optional: Performance monitoring
  lighthouse-audit:
    name: Lighthouse Performance Audit
    needs: [deploy-preview]
    runs-on: ubuntu-latest
    if: needs.deploy-preview.outputs.preview_url != ''
    steps:
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: ${{ needs.deploy-preview.outputs.preview_url }}
          configPath: '.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Cleanup on workflow completion
  cleanup:
    name: Cleanup Resources
    needs: [runtime-verification]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Cleanup Firebase Preview
        run: |
          # Optional: Remove preview deployment after verification
          echo "Preview URL will auto-expire: ${{ needs.deploy-preview.outputs.preview_url }}"
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}